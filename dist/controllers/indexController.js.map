{"version":3,"sources":["../../app/controllers/indexController.js"],"names":["getIndex","req","res","clientIp","connection","remoteAddress","fileList","fileNames","params","fs","readdirSync","i","length","tempObj","filePath","includes","split","pop","toLowerCase","startsWith","process","env","LOCAL_IP","FRONT_URL","push","cleanFiles","filter","file","spaceUsedMB","err","size","toFixed","render","path","host","spaceAvailable","SPACE_AVAILABLE"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEO,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAMC,GAAN,EAAc;AAClC,MAAIC,QAAQ,GAAGF,GAAG,CAACG,UAAJ,CAAeC,aAA9B;AACA,MAAIC,QAAQ,GAAG,EAAf;AACA,MAAIC,SAAJ;;AAEA,MAAIN,GAAG,CAACO,MAAJ,CAAW,CAAX,CAAJ,EAAmB;AACfD,IAAAA,SAAS,GAAGE,eAAGC,WAAH,CAAe,eAAeT,GAAG,CAACO,MAAJ,CAAW,CAAX,CAA9B,CAAZ;;AAEA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACK,MAA9B,EAAsCD,CAAC,EAAvC,EAA2C;AACvC,UAAIE,OAAO,GAAG,EAAd;AACA,UAAMC,QAAQ,GAAI,MAAMb,GAAG,CAACO,MAAJ,CAAW,CAAX,CAAN,GAAsB,GAAtB,GAA4BD,SAAS,CAACI,CAAD,CAAvD;AAEAE,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkBN,SAAS,CAACI,CAAD,CAA3B;AACAE,MAAAA,OAAO,CAAC,MAAD,CAAP,GAAkBC,QAAlB;;AAEA,UAAI,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuBC,QAAvB,CAAgCR,SAAS,CAACI,CAAD,CAAT,CAAaK,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,GAA8BC,WAA9B,EAAhC,CAAJ,EAAkF;AAC9EL,QAAAA,OAAO,CAAC,WAAD,CAAP,GAAuB,CAACV,QAAQ,CAACgB,UAAT,CAAoB,KAApB,IAA6BC,OAAO,CAACC,GAAR,CAAYC,QAAzC,GAAoDF,OAAO,CAACC,GAAR,CAAYE,SAAjE,IAA8E,mBAA9E,GAAoGhB,SAAS,CAACI,CAAD,CAApI;AACH;;AAEDL,MAAAA,QAAQ,CAACkB,IAAT,CAAcX,OAAd;AACH;AACJ,GAhBD,MAgBO;AACH,QAAMN,UAAS,GAAGE,eAAGC,WAAH,CAAe,WAAf,CAAlB;;AACA,QAAMe,UAAU,GAAGlB,UAAS,CAACmB,MAAV,CAAiB,UAACC,IAAD,EAAU;AAC1C,aAAOA,IAAI,KAAK,UAAT,IAAuBA,IAAI,KAAK,WAAhC,IAA+CA,IAAI,KAAK,YAA/D;AACH,KAFkB,CAAnB;;AAIA,SAAK,IAAIhB,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGc,UAAU,CAACb,MAA/B,EAAuCD,EAAC,EAAxC,EAA4C;AACxC,UAAIE,QAAO,GAAG,EAAd;AAEAA,MAAAA,QAAO,CAAC,MAAD,CAAP,GAAkBY,UAAU,CAACd,EAAD,CAA5B;AACAE,MAAAA,QAAO,CAAC,MAAD,CAAP,GAAkBY,UAAU,CAACd,EAAD,CAA5B;;AAEA,UAAI,CAAC,KAAD,EAAQ,KAAR,EAAe,MAAf,EAAuBI,QAAvB,CAAgCU,UAAU,CAACd,EAAD,CAAV,CAAcK,KAAd,CAAoB,GAApB,EAAyBC,GAAzB,GAA+BC,WAA/B,EAAhC,CAAJ,EAAmF;AAC/EL,QAAAA,QAAO,CAAC,WAAD,CAAP,GAAuB,sBAAsBY,UAAU,CAACd,EAAD,CAAvD;AACH;;AAEDL,MAAAA,QAAQ,CAACkB,IAAT,CAAcX,QAAd;AACH;AACJ;;AAED,MAAIe,WAAW,GAAG,CAAlB;AACA,iCAAQ,WAAR,EAAqB,UAACC,GAAD,EAAMC,IAAN,EAAe;AAChC,QAAID,GAAJ,EAAS;AAAE,YAAMA,GAAN;AAAY;;AAEvBD,IAAAA,WAAW,GAAG,CAACE,IAAI,GAAG,IAAP,GAAc,IAAf,EAAqBC,OAArB,CAA6B,CAA7B,CAAd;AAEA7B,IAAAA,GAAG,CAAC8B,MAAJ,CAAW,OAAX,EAAoB;AAChB1B,MAAAA,QAAQ,EAARA,QADgB;AAEhB2B,MAAAA,IAAI,EAAEhC,GAAG,CAACO,MAAJ,CAAW,CAAX,CAFU;AAGhB0B,MAAAA,IAAI,EAAE/B,QAAQ,CAACgB,UAAT,CAAoB,KAApB,IAA6BC,OAAO,CAACC,GAAR,CAAYC,QAAzC,GAAoDF,OAAO,CAACC,GAAR,CAAYE,SAHtD;AAIhBK,MAAAA,WAAW,EAAXA,WAJgB;AAKhBO,MAAAA,cAAc,EAAEf,OAAO,CAACC,GAAR,CAAYe;AALZ,KAApB;AAOH,GAZD;AAeH,CAzDM","sourcesContent":["import fs from 'fs';\nimport getSize from 'get-folder-size';\n\nexport const getIndex = (req, res) => {\n    let clientIp = req.connection.remoteAddress;\n    let fileList = [];\n    let fileNames;\n\n    if (req.params[0]) {\n        fileNames = fs.readdirSync('./uploads/' + req.params[0]);\n\n        for (let i = 0; i < fileNames.length; i++) {\n            let tempObj = {};\n            const filePath = (\"/\" + req.params[0] + \"/\" + fileNames[i]);\n\n            tempObj['name'] = fileNames[i];\n            tempObj['path'] = filePath;\n\n            if ([\"jpg\", \"png\", \"jpeg\"].includes(fileNames[i].split('.').pop().toLowerCase())) {\n                tempObj['thumbpath'] = (clientIp.startsWith(\"10.\") ? process.env.LOCAL_IP : process.env.FRONT_URL) + 'thumbnails/THUMB-' + fileNames[i]\n            }\n\n            fileList.push(tempObj);\n        }\n    } else {\n        const fileNames = fs.readdirSync('./uploads');\n        const cleanFiles = fileNames.filter((file) => {\n            return file !== \".gitkeep\" && file !== \".DS_Store\" && file !== \"thumbnails\";\n        });\n\n        for (let i = 0; i < cleanFiles.length; i++) {\n            let tempObj = {};\n\n            tempObj['name'] = cleanFiles[i];\n            tempObj['path'] = cleanFiles[i];\n\n            if ([\"jpg\", \"png\", \"jpeg\"].includes(cleanFiles[i].split('.').pop().toLowerCase())) {\n                tempObj['thumbpath'] = 'thumbnails/THUMB-' + cleanFiles[i]\n            }\n\n            fileList.push(tempObj);\n        }\n    }\n\n    let spaceUsedMB = 0;\n    getSize('./uploads', (err, size) => {\n        if (err) { throw err; }\n\n        spaceUsedMB = (size / 1024 / 1024).toFixed(2);\n\n        res.render('index', {\n            fileList,\n            path: req.params[0],\n            host: clientIp.startsWith(\"10.\") ? process.env.LOCAL_IP : process.env.FRONT_URL,\n            spaceUsedMB,\n            spaceAvailable: process.env.SPACE_AVAILABLE\n        });\n    });\n\n\n};"],"file":"indexController.js"}